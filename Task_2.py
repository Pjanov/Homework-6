# Есть два списка: tutors - имена учеников, groups - названия их классов.
# Необходимо сформировать список кортежей вида ```(tutor, group)```.
# Техническое задание
# Программа должна работать со списками tutors, groups любой длины.
# Длина результирующего списка не должна быть больше длины списка tutors.
# Если в списке groups меньше элементов, чем в списке tutors, необходимо вывести
# последние кортежи в виде: ```(<tutor>, None)```, например: ```('Станислав', None)```
# Если в списке tutors меньше элементов, чем в списке groups, то смотри пункт 2.
# Вы можете использовать в этом задании функции zip и zip_longest, но лучше обойтись без них
# Не меняйте исходные списки tutors и groups и не создавайте промежуточных списков. Только
# список результат.
# Подтвердите работоспособность(выведите в консоль результаты) для обоих вариантов: groups
# меньше tutors и tutors меньше groups.
# Сделайте сначала задание через циклы обычным образом, затем оформите решение в "одну строку"
# в виде comprehensions

# Примеры/Тесты:
# tutors = ['Иван', 'Анастасия', 'Петр', 'Сергей', 'Дмитрий', 'Борис', 'Елена']
# groups = ['9А', '7В', '9Б', '9В', '8Б', '10А', '10Б', '9А']

# Результат, где учеников меньше
# Ученики: ['Иван', 'Анастасия', 'Петр', 'Сергей', 'Дмитрий', 'Борис', 'Елена']
# Классы: ['9А', '7В', '9Б', '9В', '8Б', '10А', '10Б', '9А']
# Список:
# ('Иван', '9А')
# ('Анастасия', '7В')
# ('Петр', '9Б')
# ('Сергей', '9В')
# ('Дмитрий', '8Б')
# ('Борис', '10А')
# ('Елена', '10Б')

# Результат, где учеников больше
# Ученики: ['Иван', 'Анастасия', 'Петр', 'Сергей', 'Дмитрий', 'Борис', 'Елена']
# Классы: ['9А', '7В', '9Б', '9В']
# Список:
# ('Иван', '9А')
# ('Анастасия', '7В')
# ('Петр', '9Б')
# ('Сергей', '9В')
# ('Дмитрий', None)
# ('Борис', None)
# ('Елена', None)


# from itertools import zip_longest


# tutors = ['Иван', 'Анастасия', 'Петр', 'Сергей', 'Дмитрий', 'Борис', 'Елена']
# groups1 = ['9А', '7В', '9Б', '9В', '8Б', '10А', '10Б', '9А']
# groups2 = ['9А', '7В', '9Б', '9В']

# lst1 = list(zip(tutors, groups1))
# lst2 = list(zip_longest(tutors, groups2, fillvalue=None))
# print(lst1)
# print(lst2)

'Решение через цикл:'


def students_class(lst1: list, lst2: list) -> list:
    '''
    Длина результирующего списка не должна быть больше длины списка tutor
    :param lst1: Принемает список tutors - имена учеников
    :param lst2: Принемает список group - названия их классов
    :return: Формирует список кортежей (tutor, group)
    '''
    res = []
    n = len(lst1)
    m = len(lst2)
    if n <= m:
        for i in range(n):
            res.append((lst1[i], lst2[i]))
        return res
    else:
        for i in range(n - m):
            lst2.append(None)
        for i in range(n):
            res.append((lst1[i], lst2[i]))
        return res


tutors = ['Иван', 'Анастасия', 'Петр', 'Сергей', 'Дмитрий', 'Борис', 'Елена']
groups1 = ['9А', '7В', '9Б', '9В', '8Б', '10А', '10Б', '9А']
groups2 = ['9А', '7В', '9Б', '9В']
print(students_class(tutors, groups1))
print(students_class(tutors, groups2))
